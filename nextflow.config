profiles {

// test profile name needs to change to AWS. 
// Add reference files to s3 buckets as we test on ec2 instance

    test {
        params {
        includeConfig 'config/docker.config'
        params.reads = "s3://ccr-genomics-testdata/testdata/Test*_R_T_R{1,2}.fastq.gz"
        params.star_genome_index = "s3://ccr-genomics-testdata/References/index-STAR_2.7.9a"
        params.gtf = "s3://ccr-genomics-testdata/References/gencode.v37lift37.annotation_ERCC92.gtf"
        params.rsem_index = "s3://ccr-genomics-testdata/References/rsem_1.3.2"
        params.resultsdir = "s3://agc-424336837382-us-east-1/nfmvpout"
        }
        process {
            cpus = 2
            memory = '3 GB'

            withName: star {
               cpus = 8
               memory = '32 GB'
               time = '5h'
           }    

        }
        docker.enabled = true
    }
    biowulf {
        params {
            includeConfig 'config/docker.config'
            config_profile_description = 'Biowulf nf-core config'
            config_profile_contact = 'kopardevn@nih.gov'
            config_profile_url = 'https://hpc.nih.gov/apps/nextflow.html'
            max_memory = '20.GB'
            max_cpus = '3' 
            max_time = '4h'
            reads = "/data/khanlab/projects/fastq/*_{R1,R2}.fastq.gz"
            resultsdir = "$OUTDIR/results.$OUTTAG"
            params.star_genome_index = "/data/khanlab/projects/ngs_pipeline_testing/index-STAR_2.7.9a"
            params.gtf = "/data/khanlab/projects/ngs_pipeline_testing/References_4.0/New_GRCh37/gencode.v37lift37.annotation_ERCC92.gtf"
            params.ref_flat = "/data/khanlab/projects/ngs_pipeline_testing/References_4.0/New_GRCh37/ref_flat.txt.gz"
            params.rRNA_interval = "/data/khanlab/projects/ngs_pipeline_testing/References_4.0/New_GRCh37/rRNA_body.txt"
            params.rsem_index = "/data/khanlab/projects/ngs_pipeline_testing/References_4.0/New_GRCh37/Index/rsem_1.3.2"
            params.genome = "/data/khanlab/projects/ngs_pipeline_testing/References_4.0/New_GRCh37/GRCh37.primary_assembly.genome_ERCC92_ksorted.fa"
            params.genome_fai = "/data/khanlab/projects/ngs_pipeline_testing/References_4.0/New_GRCh37/GRCh37.primary_assembly.genome_ERCC92_ksorted.fa.fai"
            params.genome_dict = "/data/khanlab/projects/ngs_pipeline_testing/References_4.0/New_GRCh37/GRCh37.primary_assembly.genome_ERCC92_ksorted.dict"
            params.phase1_1000g = "/data/khanlab/projects/ngs_pipeline_testing/References_4.0/New_GRCh37/1000G_phase1.indels.hg19.vcf"
            params.Mills_and_1000g = "/data/khanlab/projects/ngs_pipeline_testing/References_4.0/New_GRCh37/Mills_and_1000G_gold_standard.indels.hg19.vcf"
            params.Sites1000g4genotyping = "/data/Clinomics/Ref/khanlab/annotation/1000gSites4genotyping.bed"
            params.vcf2genotype = "/data/Clinomics/Tools/ngs_pipeline_4.2/scripts/vcf2genotype.pl"
            params.vcf2loh = "/data/Clinomics/Tools/ngs_pipeline_4.2/scripts/vcf2loh.pl"
        }

// The cluster requirements also can be moved to a config file and included under biowulf profile and AWS profile.

        process {
            executor = 'slurm'
            queue = 'norm'
            queueSize = 100
            errorStrategy = 'finish'
            maxRetries = 0
            pollInterval = '1 min'
            queueStatInterval = '5 min'
            submitRateLimit = '6/1min'
//            scratch = '/lscratch/$SLURM_JOBID'
            clusterOptions = ' --gres=lscratch:400'

            withName: cutadapt {
               cpus = '4'
               memory = '2 GB'
               queue = 'quick'
               time = '2h'
           }

            withName: fastqc {
               cpus = '4'
               memory = '2 GB'
               queue = 'quick'
               time = '2h'
           }

            withLabel: 'qc' {
               cpus = '4'
               memory = '2 GB'
               queue = 'quick'
               time = '2h'
           }

            withName: star {
               cpus = '16'
               memory = '120 GB'
               queue = 'ccr,norm'
               time = '20h'
           }
            withName: rsem {
               cpus = '16'
               memory = '120 GB'
               queue = 'ccr,norm'
               time = '20h'
           }
            withName: multiqc {
               cpus = '4'
               memory = '50 GB'
               queue = 'ccr,norm'
               time = '4h'
           }	
        
            withName: 'Picard.*' {
               cpus = '10'
               memory = '50 GB'
               queue = 'ccr,norm'
               time = '4h'
           }

            withName: 'GATK.*' {
               cpus = '10'
               memory = '50 GB'
               queue = 'ccr,norm'
               time = '4h'
           }
            withName: fusioncatcher {
               cpus = '16'
               memory = '120 GB'
               queue = 'ccr,norm'
               time = '20h'
           }


        }
	singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = "$OUTDIR/.singularity"
        singularity.envWhitelist='https_proxy,http_proxy,ftp_proxy,DISPLAY,SLURM_JOBID'
	workDir = "$OUTDIR/work.$OUTTAG"
	//resultsDir = "$OUTDIR/results"

    }

}

nextflow.enable.dsl=2
